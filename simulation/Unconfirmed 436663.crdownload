{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pyute as ut\n",
    "import size_contrast_analysis as sca\n",
    "import pdb\n",
    "import opto_utils\n",
    "import os\n",
    "from importlib import reload\n",
    "import extract_with_classifier as ewc\n",
    "import naka_rushton_analysis as nra\n",
    "from importlib import reload\n",
    "import scipy.stats as sst\n",
    "import sim_utils\n",
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gen_nub_selector(run=False):\n",
    "    selector = {}\n",
    "    if run:\n",
    "        selector['running'] = lambda x: x\n",
    "    else:\n",
    "        selector['running'] = lambda x: np.logical_not(x)\n",
    "    selector['stimulus_size_deg'] = 0\n",
    "    selector['stimulus_contrast'] = 0\n",
    "    selector['stimulus_direction_deg'] = 0\n",
    "    return selector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_trialwise_data(trialwise,expt,ipart,irois=None,irun=0,nparams=(nsize,ncontrast,nori,ntrials)):\n",
    "    if irois is None:\n",
    "        return trialwise[irun].loc[expt,ipart].to_numpy().reshape((-1,)+nparams)\n",
    "    else:\n",
    "        return trialwise[irun].loc[expt,ipart].iloc[irois].to_numpy().reshape((-1,)+nparams)\n",
    "\n",
    "def compute_pref_angle(data,based_on='all'):\n",
    "    data_mean = np.nanmean(np.nanmean(np.nanmean(data,1),1),-1)\n",
    "    pref_angle = np.argmax(data_mean,axis=1)\n",
    "    return pref_angle\n",
    "\n",
    "def compute_pref_angle_trialwise(data,based_on='all'):\n",
    "    data_mean = np.nanmean(np.nanmean(np.nanmean(np.nanmean(data,1),1),-1),-1)\n",
    "    pref_angle = np.argmax(data_mean,axis=1)\n",
    "    return pref_angle\n",
    "\n",
    "def align_to_angle(data,pref_angle):\n",
    "    output = np.zeros_like(data)\n",
    "    nangle = data.shape[3]\n",
    "    for iroi in range(data.shape[0]):\n",
    "        slicer = list(np.arange(pref_angle[iroi],nangle))+list(np.arange(0,pref_angle[iroi]))\n",
    "        output[iroi] = data[iroi][:,:,slicer]\n",
    "    return output\n",
    "\n",
    "def align_to_pref_angle(data):\n",
    "    pref_angle = compute_pref_angle(data)\n",
    "    output = align_to_angle(data,pref_angle)\n",
    "    return output\n",
    "\n",
    "def align_to_pref_angle_trialwise(data):\n",
    "    pref_angle = compute_pref_angle_trialwise(data)\n",
    "    output = align_to_angle(data,pref_angle)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "dsbase = '/Users/dan/Documents/notebooks/mossing-PC/shared_data/'\n",
    "dsnames = [dsbase+x+'_data_struct.hdf5' for x in ['pyr_l4','pyr_l23','sst_l23','vip_l23','pv_l23']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<HDF5 group \"/session_181127_M10073\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190202_M10075\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190304_M10077\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190607_M10443\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190620_M10616\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190620_M10619\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190624_M10615\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190627_M10616\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190701_M10615\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191212_M0762\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181127_M10073\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190202_M10075\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190304_M10077\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190607_M10443\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190620_M10616\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190620_M10619\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190624_M10615\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190627_M10616\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190701_M10615\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191212_M0762\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dan/Documents/code/adesnal/sim_utils.py:580: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  big_ind = big_ind*iit[slc]\n",
      "/Users/dan/Documents/code/adesnal/sim_utils.py:586: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  a[[slice(None) for iind in range(ignore_first)]+[a_bool]] = b[[slice(None) for iind in range(ignore_first)]+[b_bool]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<HDF5 group \"/session_181205_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181209_M8536\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181213_M8536\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181214_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190102_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190128_M8982\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190130_M9667\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190131_M9355\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190208_M9355\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190212_M8536\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191002_M0293\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191108_M0403\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200822_M0771\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181205_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181209_M8536\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181213_M8536\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181214_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190102_M10130\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190128_M8982\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190130_M9667\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190131_M9355\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190208_M9355\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190212_M8536\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191002_M0293\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191108_M0403\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200822_M0771\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dan/Documents/code/adesnal/sim_utils.py:580: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  big_ind = big_ind*iit[slc]\n",
      "/Users/dan/Documents/code/adesnal/sim_utils.py:586: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  a[[slice(None) for iind in range(ignore_first)]+[a_bool]] = b[[slice(None) for iind in range(ignore_first)]+[b_bool]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<HDF5 group \"/session_180713_M9053\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180714_M9053\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180802_M9053\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180821_M9417\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181117_M10039\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181120_M10039\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181121_M10039\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191224_M0390\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200109_M0755\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200819_M0638\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180713_M9053\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180714_M9053\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180802_M9053\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180821_M9417\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181117_M10039\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181120_M10039\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_181121_M10039\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191224_M0390\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200109_M0755\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200819_M0638\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dan/Documents/code/adesnal/sim_utils.py:580: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  big_ind = big_ind*iit[slc]\n",
      "/Users/dan/Documents/code/adesnal/sim_utils.py:586: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  a[[slice(None) for iind in range(ignore_first)]+[a_bool]] = b[[slice(None) for iind in range(ignore_first)]+[b_bool]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<HDF5 group \"/session_180321_M7955\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0']\n",
      "<HDF5 group \"/session_180412_M7955\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180516_M8956\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180519_M8959\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180528_M8959\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180531_M8961\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180618_M8956\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180719_M8961\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180720_M8961\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180903_M8961\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190710_M0208\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191215_M0385\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200103_M0388\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180321_M7955\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0']\n",
      "<HDF5 group \"/session_180412_M7955\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180516_M8956\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180519_M8959\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180528_M8959\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180531_M8961\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180618_M8956\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180719_M8961\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180720_M8961\" (8 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_180903_M8961\" (9 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_190710_M0208\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191215_M0385\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200103_M0388\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dan/Documents/code/adesnal/sim_utils.py:580: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  big_ind = big_ind*iit[slc]\n",
      "/Users/dan/Documents/code/adesnal/sim_utils.py:586: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  a[[slice(None) for iind in range(ignore_first)]+[a_bool]] = b[[slice(None) for iind in range(ignore_first)]+[b_bool]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<HDF5 group \"/session_191105_M0589\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191220_M0589\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191229_M0892\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200102_M0892\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200108_M0891\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200620_M0891\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200621_M0893\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191105_M0589\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191220_M0589\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_191229_M0892\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200102_M0892\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200108_M0891\" (12 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200620_M0891\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n",
      "<HDF5 group \"/session_200621_M0893\" (13 members)>\n",
      "['cell_center', 'cell_depth', 'cell_id', 'cell_mask', 'cell_type', 'figure_ground_0', 'mean_green_channel', 'mean_green_channel_enhanced', 'mean_red_channel', 'mean_red_channel_corrected', 'mouse_id', 'retinotopy_0', 'size_contrast_0']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/dan/Documents/code/adesnal/sim_utils.py:580: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  big_ind = big_ind*iit[slc]\n",
      "/Users/dan/Documents/code/adesnal/sim_utils.py:586: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  a[[slice(None) for iind in range(ignore_first)]+[a_bool]] = b[[slice(None) for iind in range(ignore_first)]+[b_bool]]\n"
     ]
    }
   ],
   "source": [
    "reload(opto_utils)\n",
    "\n",
    "nbefore,nafter = 8,8\n",
    "nsize,ncontrast,nori,ntrials = 6,6,8,10\n",
    "modal_uparam = [np.array((5,8,13,22,36,60)),np.array((0,0.06,0.12,0.25,0.5,1)),np.arange(0,360,45)]\n",
    "dcutoff = 11\n",
    "\n",
    "return_dict = True\n",
    "\n",
    "to_exclude = ['session_'+exptname for exptname in ['180714_M9053','180321_M7955', '180519_M8959', '180531_M8961', '180618_M8956','190202_M10075', '190620_M10619']]\n",
    "\n",
    "# output: neurons x locomotion x size x contrast x orientation x trials\n",
    "\n",
    "sco_big_aligned_trialwise,sco_big_misaligned_trialwise = [[None for itype in range(5)] for _ in range(2)]\n",
    "neuron_ids_aligned,neuron_ids_misaligned,run_speed_trialwise = [[None for itype in range(5)] for _ in range(3)]\n",
    "\n",
    "for itype,dsfile in enumerate(dsnames):\n",
    "    if True:\n",
    "\n",
    "        run_fn = lambda x: x[:,nbefore:-nafter].mean(-1)>1 # 1 cm/sec running cutoff\n",
    "        df,roi_info,trial_info = ut.compute_tavg_dataframe(dsfile,expttype='size_contrast_0',run_fn=run_fn)\n",
    "        run_fn = lambda x: x[:,nbefore:-nafter].mean(-1) # 1 cm/sec running cutoff\n",
    "        _,_,run_info = ut.compute_tavg_dataframe(dsfile,expttype='size_contrast_0',run_fn=run_fn)\n",
    "\n",
    "        displacement = opto_utils.extract_fit_displacement(dsfile,expttype='size_contrast_0')\n",
    "\n",
    "        train_test = [None for irun in range(2)]\n",
    "        reload(ut)\n",
    "        for irun in range(2):\n",
    "            selector = gen_nub_selector(run=irun)\n",
    "            train_test[irun] = ut.select_trials(trial_info,selector,0.5,include_all=True)\n",
    "            for key in train_test[irun]:\n",
    "                train_test[irun][key].append(train_test[irun][key][2])#train_test[irun][key][0] | train_test[irun][key][1])\n",
    "\n",
    "        reload(ut)\n",
    "        trialwise = [None for irun in range(2)]\n",
    "        run_speed = [None for irun in range(2)]\n",
    "        for irun in range(2):\n",
    "#             trialwise[irun] = ut.compute_tuning_trialwise_df(df,trial_info,selector,include=train_test[irun])\n",
    "            trialwise[irun] = ut.compute_tuning_trialwise_df(df,trial_info,selector,include=train_test[irun],return_dict=return_dict)\n",
    "            run_speed[irun] = ut.get_key_trialwise(run_info,'running',trial_info,selector,include=train_test[irun])\n",
    "\n",
    "        sco_big_aligned_trialwise[itype],sco_big_misaligned_trialwise[itype] = [[None for irun in range(2)] for _ in range(2)]\n",
    "        neuron_ids_aligned[itype],neuron_ids_misaligned[itype],run_speed_trialwise[itype] = [[None for irun in range(2)] for _ in range(3)]\n",
    "\n",
    "        for irun in range(2):\n",
    "            sco_big_aligned_trialwise[itype][irun] = np.zeros((0,)+(nsize,ncontrast,nori,ntrials))\n",
    "            sco_big_misaligned_trialwise[itype][irun] = np.zeros((0,)+(nsize,ncontrast,nori,ntrials))\n",
    "            run_speed_trialwise[itype][irun] = np.zeros((0,)+(nsize,ncontrast,nori,ntrials))\n",
    "            neuron_ids_aligned[itype][irun],neuron_ids_misaligned[itype][irun] = [np.zeros((0,2)) for _ in range(2)]\n",
    "            for iexpt,expt in enumerate(list(trial_info.keys())):\n",
    "                if not expt in to_exclude:\n",
    "                    this_uparam = [np.unique(trial_info[expt][key]) for key in ['stimulus_size_deg','stimulus_contrast','stimulus_direction_deg']]\n",
    "#                     print(this_uparam)\n",
    "                    nparams = tuple([len(tu) for tu in this_uparam])\n",
    "                    this_ntrials = int(len(trial_info[expt]['stimulus_size_deg'])/np.prod(nparam))\n",
    "                    \n",
    "                    if not return_dict:\n",
    "                        data = [get_trialwise_data(trialwise,expt,ipart,irun=irun,nparams=nparams+(this_ntrials,)) for ipart in range(3)]\n",
    "                        scalls = [data[ipart] for ipart in range(3)]\n",
    "\n",
    "                    centered = np.sqrt(np.sum(displacement[expt]**2,1))<dcutoff\n",
    "\n",
    "                    ipart = 2\n",
    "\n",
    "                    roilist = np.arange(centered.shape[0])\n",
    "                    exptid = iexpt*np.ones((centered.shape[0],))\n",
    "                    these_neuron_ids = np.concatenate((exptid[:,np.newaxis],roilist[:,np.newaxis]),axis=1)\n",
    "\n",
    "\n",
    "                    ipart = 2\n",
    "                    \n",
    "                    def concat_these(source_data,to_concat,cell_include):\n",
    "                        this_data = source_data[cell_include]\n",
    "                        nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "#                         nan_padded[:,:,:,:,:this_data.shape[4]] = this_data\n",
    "                        sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                        to_concat = np.concatenate((to_concat,nan_padded),axis=0)\n",
    "                        return to_concat\n",
    "                    \n",
    "#                     cell_includes = [centered,~centered]\n",
    "#                     to_concats = [sco_big_aligned_trialwise[itype][irun],sco_big_misaligned_trialwise[itype][irun]]\n",
    "#                     for cell_include,to_concat in zip(cell_includes,to_concats):\n",
    "#                         to_concat = concat_these(to_concat,cell_include)\n",
    "\n",
    "                    cell_include = centered\n",
    "                    if not return_dict:\n",
    "                        this_data = scalls[ipart]#[cell_include]\n",
    "    #                     concat_these(this_data,sco_big_aligned_trialwise[itype][irun],cell_include)\n",
    "    # #                     this_data = run_speed[irun][expt][ipart]\n",
    "    # #                     concat_these(this_data,run_speed_trialwise[itype][irun],cell_include)\n",
    "                        nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "                        sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                        sco_big_aligned_trialwise[itype][irun] = np.concatenate((sco_big_aligned_trialwise[itype][irun],nan_padded),axis=0)\n",
    "                    else:\n",
    "                        this_data = trialwise[irun][expt][ipart]\n",
    "                        nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "                        sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                        sco_big_aligned_trialwise[itype][irun] = np.concatenate((sco_big_aligned_trialwise[itype][irun],nan_padded),axis=0)                    \n",
    "                    neuron_ids_aligned[itype][irun] = np.concatenate((neuron_ids_aligned[itype][irun],these_neuron_ids[cell_include]),axis=0)\n",
    "                    \n",
    "                    cell_include = ~centered\n",
    "                    if not return_dict:\n",
    "                        this_data = scalls[ipart]#[cell_include]\n",
    "    #                     concat_these(this_data,sco_big_aligned_trialwise[itype][irun],cell_include)\n",
    "    # #                     this_data = run_speed[irun][expt][ipart]\n",
    "    # #                     concat_these(this_data,run_speed_trialwise[itype][irun],cell_include)\n",
    "                        nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "                        sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                        sco_big_misaligned_trialwise[itype][irun] = np.concatenate((sco_big_misaligned_trialwise[itype][irun],nan_padded),axis=0)\n",
    "                    else:\n",
    "                        this_data = trialwise[irun][expt][ipart]\n",
    "                        nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "                        sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                        sco_big_misaligned_trialwise[itype][irun] = np.concatenate((sco_big_misaligned_trialwise[itype][irun],nan_padded),axis=0)\n",
    "                    neuron_ids_misaligned[itype][irun] = np.concatenate((neuron_ids_misaligned[itype][irun],these_neuron_ids[cell_include]),axis=0)\n",
    "                    \n",
    "                    this_data = run_speed[irun][expt][ipart]\n",
    "                    nan_padded = np.nan*np.ones((this_data.shape[0],nsize,ncontrast,nori,ntrials))\n",
    "                    sim_utils.assign_from_uparam(nan_padded[:,:,:,:,:this_data.shape[4]],modal_uparam,this_data,this_uparam)\n",
    "                    run_speed_trialwise[itype][irun] = np.concatenate((run_speed_trialwise[itype][irun],nan_padded),axis=0)\n",
    "                    \n",
    "        sco_big_aligned_trialwise[itype] = np.concatenate([sc[:,np.newaxis] for sc in sco_big_aligned_trialwise[itype]],axis=1)\n",
    "        sco_big_misaligned_trialwise[itype] = np.concatenate([sc[:,np.newaxis] for sc in sco_big_misaligned_trialwise[itype]],axis=1)\n",
    "        neuron_ids_aligned[itype] = neuron_ids_aligned[itype][0]\n",
    "        neuron_ids_misaligned[itype] = neuron_ids_misaligned[itype][0]\n",
    "        run_speed_trialwise[itype] = np.concatenate([sc[:,np.newaxis] for sc in run_speed_trialwise[itype]],axis=1)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save('celltype_trialwise_data.npy',{'celltype_lbls':['L4 PC','L2/3 PC','SST','VIP','PV'],'rs_axis_lbls':['neuron','running','size','contrast','direction','trial'],'run_speed_axis_lbls':['expt','running','size','contrast','direction','trial'],'neuron_ids_axis_lbls':['expt','neuron'],'rstrial_aligned':sco_big_aligned_trialwise,'rstrial_misaligned':sco_big_misaligned_trialwise,'neuron_ids_aligned':neuron_ids_aligned,'neuron_ids_misaligned':neuron_ids_misaligned,'run_speed_trialwise':run_speed_trialwise},allow_pickle=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
